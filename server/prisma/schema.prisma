generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(255)
  email      String   @unique
  password   String   @db.VarChar(255)
  role       Role     @default(USER)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Category {
  id   Int    @id @default(autoincrement())
  name String @unique
}

model Message {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(255)
  email      String   @db.VarChar(255)
  subject    String   @db.VarChar(255)
  message    String   @db.Text
  created_at DateTime @default(now())

  @@index([email])
}

model Home {
  id         Int   @id @default(autoincrement())
  aboutUs    Json
  advantages Json
  services   Json?
}

model Categories {
  id               Int        @id @default(autoincrement())
  category         String     @unique
  title            String     @db.VarChar(255)
  mainDescription  String     @db.Text
  overviewTitle    String     @db.VarChar(255)
  overviewContent  String     @db.Text
  offeringsTitle   String     @db.VarChar(255)
  offeringsContent String     @db.Text
  services         Services[]
}

model Technology {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  title       String     @db.VarChar(255)
  description String     @db.Text
  benefits    String?    @db.Text
  services    Services[]
}

model Services {
  id           Int         @id @default(autoincrement())
  title        String      @unique
  description  String      @db.Text
  servicelink  String      @unique
  image        String?     @db.VarChar(255)
  categoryId   Int?
  status       Boolean     @default(false)
  technologyId Int?
  features     Feature[]
  category     Categories? @relation(fields: [categoryId], references: [id])
  technology   Technology? @relation(fields: [technologyId], references: [id])

  @@index([categoryId])
  @@index([technologyId])
}

model Feature {
  id          Int       @id @default(autoincrement())
  title       String    @db.VarChar(255)
  description String    @db.Text
  serviceId   Int?
  service     Services? @relation(fields: [serviceId], references: [id])

  @@index([serviceId])
}

model Partner {
  id                 Int      @id @default(autoincrement())
  name               String
  email              String   @unique
  phone              String
  hearAboutUs        String
  companyName        String
  addressLine1       String
  addressLine2       String?
  city               String
  state              String
  postalCode         String
  country            String
  website            String?
  interestedProducts Json
  message            String?
  status             String   @default("PENDING")
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Seller {
  id      Int     @id @default(autoincrement())
  name    String
  country String
  email   String?
  address String?
  region  Region
  company String?
  phones  Phone[] @relation("SellerPhones")
}

model Phone {
  id       Int    @id @default(autoincrement())
  number   String
  sellerId Int
  seller   Seller @relation("SellerPhones", fields: [sellerId], references: [id], onDelete: Cascade)

  @@index([sellerId], map: "Phone_sellerId_fkey")
}

enum Role {
  USER
  ADMIN
}

enum Region {
  NORTH_AMERICA
  SOUTH_AMERICA
  EUROPE
  MIDDLE_EAST
  AFRICA
  ASIA
  CARIBBEAN
}
